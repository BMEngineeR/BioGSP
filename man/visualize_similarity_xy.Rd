% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualization.R
\name{visualize_similarity_xy}
\alias{visualize_similarity_xy}
\title{Visualize similarity in low vs non-low frequency space}
\usage{
visualize_similarity_xy(
  similarity_results,
  point_size = 2,
  point_color = "steelblue",
  add_diagonal = TRUE,
  add_axes_lines = TRUE,
  title = "Low-frequency vs Non-low-frequency Similarity",
  show_labels = FALSE,
  show_names = FALSE
)
}
\arguments{
\item{similarity_results}{List of similarity results from runSGCC function, or a single result}

\item{point_size}{Size of points in the plot (default: 2)}

\item{point_color}{Color of points (default: "steelblue")}

\item{add_diagonal}{Whether to add diagonal reference lines (default: TRUE)}

\item{add_axes_lines}{Whether to add x=0 and y=0 reference lines (default: TRUE)}

\item{title}{Plot title (default: "Low-frequency vs Non-low-frequency Similarity")}

\item{show_labels}{Whether to show point labels if names are available (default: FALSE)}

\item{show_names}{Whether to display data point names as text labels using ggrepel (default: FALSE).
If more than 50 points, randomly samples 50 for labeling. Requires ggrepel package.}
}
\value{
ggplot object showing similarity space visualization
}
\description{
Create a scatter plot with low-frequency similarity (c_low) on x-axis
and non-low-frequency similarity (c_nonlow) on y-axis from runSGCC results
}
\examples{
\dontrun{
# Single similarity result
sim_result <- runSGCC("signal1", "signal2", SG = SG_object)
plot <- visualize_similarity_xy(sim_result)
print(plot)

# Multiple similarity results
sim_results <- list(
  pair1 = runSGCC("signal1", "signal2", SG = SG_object1),
  pair2 = runSGCC("signal1", "signal2", SG = SG_object2)
)
plot <- visualize_similarity_xy(sim_results, show_names = TRUE)
print(plot)

# Show both labels and names (for comparison)
plot_both <- visualize_similarity_xy(sim_results, show_labels = TRUE, show_names = TRUE)
print(plot_both)

# With many data points (>50), names will be randomly sampled
# install.packages("ggrepel")  # Required for show_names = TRUE
plot_many <- visualize_similarity_xy(many_sim_results, show_names = TRUE)
print(plot_many)
}
}
