% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{sgwt_weighted_similarity}
\alias{sgwt_weighted_similarity}
\title{Energy-normalized weighted similarity between two SGWT results}
\usage{
sgwt_weighted_similarity(
  sgwt_a,
  sgwt_b,
  eps = 1e-12,
  validate = TRUE,
  return_parts = TRUE,
  low_only = FALSE
)
}
\arguments{
\item{sgwt_a}{SGWT output for signal A. Either the full list returned by SGWT (with `$decomposition`)
or a decomposition list as returned by `sgwt_forward()`.}

\item{sgwt_b}{SGWT output for signal B. Same format as `sgwt_a`.}

\item{eps}{Small numeric for numerical stability when norms are near zero (default 1e-12).}

\item{validate}{Logical; if TRUE, check consistency of dimensions, scale count/order, and kernel family.}

\item{return_parts}{Logical; if TRUE (default), return a list with components; if FALSE, return only the scalar S.}

\item{low_only}{Logical; if TRUE, compute **low-frequency-only** similarity (skip non-low and set `S = c_low`).}
}
\value{
If `return_parts=TRUE`, a list with:
  * `c_low`     — cosine on scaling coefficients
  * `c_nonlow`  — cosine on flattened wavelet coefficients (**NA if `low_only = TRUE`**)
  * `w_low`     — macro weight for the low-frequency part (in [0,1])
  * `w_NL`      — 1 - w_low (non-low weight)
  * `S`         — final weighted similarity in [-1,1]
  * `E_low_a`, `E_NL_a`, `E_low_b`, `E_NL_b` — energy diagnostics per signal (**E_NL_* = NA if `low_only`**)
  * `n`, `J`    — length of signal and number of wavelet scales (**J = NA if `low_only`**)
If `return_parts=FALSE`, returns the scalar `S`.
}
\description{
Compute low-frequency cosine similarity (scaling), non-low cosine similarity
(flattened wavelet coefficients), and an overall energy-normalized weighted score.
If `low_only = TRUE`, compute only the low-frequency cosine and set `S = c_low`.
}
\examples{
\dontrun{
# Assume two SGWT results sgwt_res1 and sgwt_res2 from SGWT(..., return_all=TRUE)
sim <- sgwt_weighted_similarity(sgwt_res1, sgwt_res2)
sim_low <- sgwt_weighted_similarity(sgwt_res1, sgwt_res2, low_only = TRUE)
str(sim)
}
}
