% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{sgwt_similarity}
\alias{sgwt_similarity}
\title{Comprehensive Signal Similarity Analysis}
\usage{
sgwt_similarity(
  signal1,
  signal2,
  data.in = NULL,
  x_col = "x",
  y_col = "y",
  k = 25,
  J = 4,
  kernel_type = "mexican_hat",
  eps = 1e-12,
  low_only = FALSE,
  return_parts = FALSE,
  ...
)
}
\arguments{
\item{signal1}{Either a character string (column name in data.in), numeric vector, or SGWT result object}

\item{signal2}{Either a character string (column name in data.in), numeric vector, or SGWT result object}

\item{data.in}{Data frame containing signals (required if signal1/signal2 are column names)}

\item{x_col}{Column name for X coordinates (default: "x")}

\item{y_col}{Column name for Y coordinates (default: "y")}

\item{k}{Number of nearest neighbors for graph construction (default: 25)}

\item{J}{Number of wavelet scales (default: 4)}

\item{kernel_type}{Wavelet kernel type (default: "mexican_hat")}

\item{eps}{Numerical stability parameter (default: 1e-12)}

\item{low_only}{If TRUE, use only low-frequency similarity (default: FALSE)}

\item{return_parts}{If TRUE, return detailed components; if FALSE, return scalar similarity (default: FALSE)}

\item{...}{Additional arguments passed to SGWT()}
}
\value{
Similarity score (scalar) or detailed similarity analysis (list) depending on return_parts
}
\description{
Compute similarity between two signals using either raw signals (via SGWT) 
or pre-computed SGWT decompositions. This function provides a unified interface for 
signal similarity analysis with energy normalization and advanced features.
}
\examples{
\dontrun{
# Method 1: Direct signals in data frame
data <- data.frame(x = runif(100), y = runif(100), 
                  signal1 = rnorm(100), signal2 = rnorm(100))
sim1 <- sgwt_similarity("signal1", "signal2", data.in = data)

# Method 2: Pre-computed SGWT results
sgwt1 <- SGWT(data, signal = "signal1", k = 25, J = 4)
sgwt2 <- SGWT(data, signal = "signal2", k = 25, J = 4)
sim2 <- sgwt_similarity(sgwt1, sgwt2)

# Method 3: Mixed - one SGWT result, one raw signal
sim3 <- sgwt_similarity(sgwt1, "signal2", data.in = data)
}
}
